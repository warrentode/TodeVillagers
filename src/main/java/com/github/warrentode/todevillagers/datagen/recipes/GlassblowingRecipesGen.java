package com.github.warrentode.todevillagers.datagen.recipes;

import com.github.warrentode.todevillagers.block.ModBlocks;
import com.github.warrentode.todevillagers.datagen.recipes.builder.GlassblowingRecipesBuilder;
import com.github.warrentode.todevillagers.item.ModItems;
import com.github.warrentode.todevillagers.recipes.glassblowing.recipebook.GlassblowingRecipeBookTab;
import net.minecraft.advancements.critereon.InventoryChangeTrigger;
import net.minecraft.data.DataGenerator;
import net.minecraft.data.recipes.FinishedRecipe;
import net.minecraft.data.recipes.RecipeProvider;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.block.Blocks;
import net.minecraftforge.common.Tags;
import net.minecraftforge.common.crafting.conditions.IConditionBuilder;

import java.util.function.Consumer;

public class GlassblowingRecipesGen extends RecipeProvider implements IConditionBuilder {
    public static final float DEFAULT_XP = 0.35F;
    public static final int DEFAULT_TIME = 100;

    public GlassblowingRecipesGen(DataGenerator pGenerator) {
        super(pGenerator);
    }

    public static void register(Consumer<FinishedRecipe> consumer) {
        blowGlassRecipes(consumer);
    }

    private static void blowGlassRecipes(Consumer<FinishedRecipe> consumer) {
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.GLASS_BOTTLE, 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("bottle")
                .addIngredient(ModItems.CRUSHED_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.RECYCLING)
                .unlockedBy("has_crushed_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModItems.CRUSHED_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.GLASS_BOTTLE, 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("bottle")
                .addIngredient(Tags.Items.GLASS)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glass", has(Tags.Items.GLASS))
                .build(consumer);
        // colorless sand + dye for stained-glass
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.WHITE_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.WHITE_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.LIGHT_GRAY_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.LIGHT_GRAY_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.GRAY_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.GRAY_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.BLACK_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.BLACK_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.BROWN_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.BROWN_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.RED_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.RED_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.ORANGE_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.ORANGE_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.YELLOW_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.YELLOW_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.LIME_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.LIME_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.GREEN_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.GREEN_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.CYAN_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.CYAN_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.LIGHT_BLUE_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.LIGHT_BLUE_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.BLUE_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.BLUE_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.PURPLE_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.PURPLE_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.MAGENTA_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.MAGENTA_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.PINK_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.PINK_DYE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_dye_for_stained_glass", has(Tags.Items.DYES))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.WHITE_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.WHITE_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_white_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.WHITE_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.LIGHT_GRAY_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.LIGHT_GRAY_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_light_gray_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.LIGHT_GRAY_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.GRAY_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.GRAY_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_gray_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GRAY_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.BLACK_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.BLACK_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_black_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BLACK_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.BROWN_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.BROWN_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_brown_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BROWN_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.RED_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.RED_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_red_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.RED_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.ORANGE_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.ORANGE_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_orange_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.ORANGE_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.YELLOW_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.YELLOW_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_yellow_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.YELLOW_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.LIME_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.LIME_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_lime_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.LIME_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.GREEN_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.GREEN_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_green_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GREEN_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.CYAN_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.CYAN_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_cyan_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.CYAN_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.LIGHT_BLUE_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.LIGHT_BLUE_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_light_blue_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.LIGHT_BLUE_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.BLUE_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.BLUE_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_blue_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.BLUE_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.PURPLE_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.PURPLE_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_purple_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.PURPLE_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.MAGENTA_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.MAGENTA_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_magenta_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.MAGENTA_STAINED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.PINK_STAINED_GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.PINK_STAINED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_pink_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.PINK_STAINED_GLASS))
                .build(consumer);
        // red glass from red sand
        GlassblowingRecipesBuilder.glassblowingRecipe("red_stained_glass_alt", Items.RED_STAINED_GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_RED)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_red_sand_for_glass_block", has(Tags.Items.SAND_RED))
                .build(consumer);
        // glass block recipes
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_sand", has(Tags.Items.SAND_COLORLESS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.GLASS, 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(ModItems.CRUSHED_GLASS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.RECYCLING)
                .unlockedBy("has_crushed_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModItems.CRUSHED_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe("glass_alt", Items.GLASS, 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Items.GLASS_BOTTLE)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glass_bottle", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GLASS_BOTTLE))
                .build(consumer);
        // glowing glass block recipes
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.GLOWING_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(ModItems.CRUSHED_GLASS.get())
                .addIngredient(Items.QUARTZ)
                .addIngredient(Items.GLOW_INK_SAC)
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.RECYCLING)
                .unlockedBy("has_glow_ink", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GLOW_INK_SAC))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe("glowing_glass_alt2", ModBlocks.GLOWING_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(ModItems.CRUSHED_GLASS.get())
                .addIngredient(Items.QUARTZ)
                .addIngredient(Items.GLOWSTONE_DUST)
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.RECYCLING)
                .unlockedBy("has_glowstone", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GLOWSTONE_DUST))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.GLOWING_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(ModItems.MARVER.get())
                .addIngredient(Items.QUARTZ)
                .addIngredient(Items.GLOW_INK_SAC)
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glow_ink", has(Items.GLOW_INK_SAC))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe("glowing_glass_alt1", ModBlocks.GLOWING_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(ModItems.MARVER.get())
                .addIngredient(Items.QUARTZ)
                .addIngredient(Items.GLOWSTONE_DUST)
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glowstone_dust", has(Items.GLOWSTONE_DUST))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe("glowing_glass_alt2", ModBlocks.GLOWING_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(Items.GLOW_INK_SAC)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glow_ink", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GLOW_INK_SAC))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe("glowing_glass_alt3", ModBlocks.GLOWING_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(Items.GLOWSTONE_DUST)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glowstone", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GLOWSTONE_DUST))
                .build(consumer);
        // redstone infused glass block recipes
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REDSTONE_INFUSED_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(ModItems.CRUSHED_GLASS.get())
                .addIngredient(ModItems.MARVER.get())
                .addIngredient(Items.QUARTZ)
                .addIngredient(Items.REDSTONE)
                .setRecipeBookTab(GlassblowingRecipeBookTab.RECYCLING)
                .unlockedBy("has_crushed_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModItems.CRUSHED_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REDSTONE_INFUSED_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(ModItems.MARVER.get())
                .addIngredient(Items.QUARTZ)
                .addIngredient(Items.REDSTONE)
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_redstone", has(Items.REDSTONE))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe("redstone_infused_alt", ModBlocks.REDSTONE_INFUSED_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .addIngredient(ModItems.MARVER.get())
                .addIngredient(Items.REDSTONE)
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_redstone", InventoryChangeTrigger.TriggerInstance.hasItems(Items.REDSTONE))
                .build(consumer);
        // tinted glass block recipes
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Blocks.TINTED_GLASS, 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.AMETHYST_SHARD)
                .addIngredient(Items.AMETHYST_SHARD)
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_amethyst", has(Items.AMETHYST_SHARD))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Blocks.TINTED_GLASS, 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(ModItems.CRUSHED_GLASS.get())
                .addIngredient(Items.AMETHYST_SHARD)
                .addIngredient(Items.AMETHYST_SHARD)
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.RECYCLING)
                .unlockedBy("has_crushed_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModItems.CRUSHED_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe("tinted_glass_alt", Blocks.TINTED_GLASS, 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(Items.AMETHYST_SHARD)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_reinforced_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.REINFORCED_GLASS.get()))
                .build(consumer);
        // shifting glass block recipes
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.SHIFTING_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.QUARTZ)
                .addIngredient(Items.PRISMARINE_CRYSTALS)
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_prismarine_crystals", has(Items.PRISMARINE_CRYSTALS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.SHIFTING_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(ModItems.CRUSHED_GLASS.get())
                .addIngredient(Items.QUARTZ)
                .addIngredient(Items.PRISMARINE_CRYSTALS)
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.RECYCLING)
                .unlockedBy("has_crushed_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModItems.CRUSHED_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe("shifting_glass_alt", ModBlocks.SHIFTING_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(Items.PRISMARINE_CRYSTALS)
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_prismarine_crystals", has(Items.PRISMARINE_CRYSTALS))
                .build(consumer);
        // reinforced glass block recipes
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REINFORCED_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(Tags.Items.SAND_COLORLESS)
                .addIngredient(Items.QUARTZ)
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_quartz", has(Items.QUARTZ))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REINFORCED_GLASS.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_block")
                .addIngredient(ModItems.CRUSHED_GLASS.get())
                .addIngredient(Items.QUARTZ)
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.RECYCLING)
                .unlockedBy("has_crushed_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModItems.CRUSHED_GLASS.get()))
                .build(consumer);

        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.GLOWING_GLASS_BUTTON.get(), 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_button")
                .addIngredient(ModBlocks.GLOWING_GLASS_SLAB.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glowing_glass_slab", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.GLOWING_GLASS_SLAB.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REINFORCED_GLASS_BUTTON.get(), 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_button")
                .addIngredient(ModBlocks.REINFORCED_GLASS_SLAB.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_reinforced_glass_slab", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.REINFORCED_GLASS_SLAB.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.SHIFTING_GLASS_BUTTON.get(), 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_button")
                .addIngredient(ModBlocks.SHIFTING_GLASS_SLAB.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_shifting_glass_slab", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.SHIFTING_GLASS_SLAB.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.TINTED_GLASS_BUTTON.get(), 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_button")
                .addIngredient(ModBlocks.TINTED_GLASS_SLAB.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_tinted_glass_slab", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.TINTED_GLASS_SLAB.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.GLOWING_GLASS_DOOR.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_door")
                .addIngredient(ModBlocks.GLOWING_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glowing_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.GLOWING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REINFORCED_GLASS_DOOR.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_door")
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_reinforced_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.REINFORCED_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.SHIFTING_GLASS_DOOR.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_door")
                .addIngredient(ModBlocks.SHIFTING_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_shifting_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.SHIFTING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.TINTED_GLASS_DOOR.get(), 1, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_door")
                .addIngredient(Blocks.TINTED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_tinted_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Blocks.TINTED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.GLOWING_GLASS_STAIRS.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_stairs")
                .addIngredient(ModBlocks.GLOWING_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glowing_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.GLOWING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REINFORCED_GLASS_STAIRS.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_stairs")
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_reinforced_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.REINFORCED_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.SHIFTING_GLASS_STAIRS.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_stairs")
                .addIngredient(ModBlocks.SHIFTING_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_shifting_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.SHIFTING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.TINTED_GLASS_STAIRS.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_stairs")
                .addIngredient(Blocks.TINTED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_tinted_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Blocks.TINTED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.GLOWING_GLASS_WALL.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_wall")
                .addIngredient(ModBlocks.GLOWING_GLASS.get())
                .addIngredient(ModBlocks.GLOWING_GLASS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glowing_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.GLOWING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REINFORCED_GLASS_WALL.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_wall")
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_reinforced_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.REINFORCED_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.SHIFTING_GLASS_WALL.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_wall")
                .addIngredient(ModBlocks.SHIFTING_GLASS.get())
                .addIngredient(ModBlocks.SHIFTING_GLASS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_shifting_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.SHIFTING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.TINTED_GLASS_WALL.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_wall")
                .addIngredient(Blocks.TINTED_GLASS)
                .addIngredient(Blocks.TINTED_GLASS)
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_tinted_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Blocks.TINTED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, Items.GLASS_PANE, 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Items.GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Items.GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.GLOWING_GLASS_FENCE.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_fence")
                .addIngredient(ModBlocks.GLOWING_GLASS.get())
                .addIngredient(ModBlocks.GLOWING_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glowing_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.GLOWING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.GLOWING_GLASS_FENCE_GATE.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_fence")
                .addIngredient(ModBlocks.GLOWING_GLASS.get())
                .addIngredient(ModBlocks.GLOWING_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glowing_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.GLOWING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.GLOWING_GLASS_PRESSURE_PLATE.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pressure_plate")
                .addIngredient(ModBlocks.GLOWING_GLASS_SLAB.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glowing_glass_slab", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.GLOWING_GLASS_SLAB.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.GLOWING_GLASS_SLAB.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_slab")
                .addIngredient(ModBlocks.GLOWING_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glowing_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.GLOWING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.GLOWING_GLASS_TRAPDOOR.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_trapdoor")
                .addIngredient(ModBlocks.GLOWING_GLASS_DOOR.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glowing_glass_door", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.GLOWING_GLASS_DOOR.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.GLOWING_GLASS_PANE.get(), 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(ModBlocks.GLOWING_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_glowing_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.GLOWING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REINFORCED_GLASS_FENCE.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_fence")
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_reinforced_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.REINFORCED_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REINFORCED_GLASS_FENCE_GATE.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_fence")
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_reinforced_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.REINFORCED_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REINFORCED_GLASS_PANE.get(), 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_reinforced_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.REINFORCED_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REINFORCED_GLASS_PRESSURE_PLATE.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pressure_plate")
                .addIngredient(ModBlocks.REINFORCED_GLASS_SLAB.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_reinforced_glass_slab", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.REINFORCED_GLASS_SLAB.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REINFORCED_GLASS_SLAB.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_slab")
                .addIngredient(ModBlocks.REINFORCED_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_reinforced_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.REINFORCED_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.REINFORCED_GLASS_TRAPDOOR.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_trapdoor")
                .addIngredient(ModBlocks.REINFORCED_GLASS_DOOR.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_reinforced_glass_door", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.REINFORCED_GLASS_DOOR.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.SHIFTING_GLASS_FENCE.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_fence")
                .addIngredient(ModBlocks.SHIFTING_GLASS.get())
                .addIngredient(ModBlocks.SHIFTING_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_shifting_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.SHIFTING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.SHIFTING_GLASS_FENCE_GATE.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_fence")
                .addIngredient(ModBlocks.SHIFTING_GLASS.get())
                .addIngredient(ModBlocks.SHIFTING_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_shifting_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.SHIFTING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.SHIFTING_GLASS_PANE.get(), 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(ModBlocks.SHIFTING_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_shifting_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.SHIFTING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.SHIFTING_GLASS_PRESSURE_PLATE.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pressure_plate")
                .addIngredient(ModBlocks.SHIFTING_GLASS_SLAB.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_shifting_glass_slab", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.SHIFTING_GLASS_SLAB.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.SHIFTING_GLASS_SLAB.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_slab")
                .addIngredient(ModBlocks.SHIFTING_GLASS.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_shifting_glass", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.SHIFTING_GLASS.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.SHIFTING_GLASS_TRAPDOOR.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_trapdoor")
                .addIngredient(ModBlocks.SHIFTING_GLASS_DOOR.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_shifting_glass_door", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.SHIFTING_GLASS_DOOR.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.TINTED_GLASS_FENCE.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_fence")
                .addIngredient(Blocks.TINTED_GLASS)
                .addIngredient(Blocks.TINTED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_tinted_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Blocks.TINTED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.TINTED_GLASS_FENCE_GATE.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_fence")
                .addIngredient(Blocks.TINTED_GLASS)
                .addIngredient(Blocks.TINTED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_tinted_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Blocks.TINTED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.TINTED_GLASS_PANE.get(), 4, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pane")
                .addIngredient(Blocks.TINTED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_tinted_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Blocks.TINTED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.TINTED_GLASS_PRESSURE_PLATE.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_pressure_plate")
                .addIngredient(ModBlocks.TINTED_GLASS_SLAB.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.MARVER.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_tinted_glass_slab", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.TINTED_GLASS_SLAB.get()))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.TINTED_GLASS_SLAB.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_slab")
                .addIngredient(Blocks.TINTED_GLASS)
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .addIngredient(ModItems.GLASSBLOWING_PIPE.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_tinted_glass", InventoryChangeTrigger.TriggerInstance.hasItems(Blocks.TINTED_GLASS))
                .build(consumer);
        GlassblowingRecipesBuilder.glassblowingRecipe(null, ModBlocks.TINTED_GLASS_TRAPDOOR.get(), 2, DEFAULT_TIME, DEFAULT_XP)
                .setGroup("glass_trapdoor")
                .addIngredient(ModBlocks.TINTED_GLASS_DOOR.get())
                .addIngredient(ModItems.GLASSBLOWER_SHEARS.get())
                .setRecipeBookTab(GlassblowingRecipeBookTab.GLASS_WORK)
                .unlockedBy("has_tinted_glass_door", InventoryChangeTrigger.TriggerInstance.hasItems(ModBlocks.TINTED_GLASS_DOOR.get()))
                .build(consumer);
    }
}