//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrUnresolvedAccess
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "${project.minecraft_version}-${project.mod_version}"
group = "${project.mod_domain}"
archivesBaseName = "todevillagers"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'todevillagers'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                todevillagers {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'todevillagers'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                todevillagers {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'todevillagers'

            mods {
                todevillagers {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'todevillagers', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                todevillagers {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "mixins.todevillagers.refmap.json"
    config "mixins.todevillagers.json"
    showMessageTypes = true
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.1.0'

    // addresses vulnerabilities with imported external libraries
    implementation 'io.netty:netty-codec:4.2.3.Final'
    implementation 'io.netty:netty-handler:4.2.3.Final'
    implementation 'com.google.guava:guava:33.0.0-jre'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'org.apache.commons:commons-compress:1.27.1'
    implementation 'org.apache.commons:commons-lang3:3.18.0'

    // mod list

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.modid,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.modid,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "mixins.todevillagers.json"
        ])
    }
}

tasks.register('updateJson') {
    file('update.json').withWriter { w ->
        file('update_template.json').eachLine { line ->
            w << line.replaceAll("stable_release", stable_release)
                    .replaceAll("latest_version", project.version) + System.lineSeparator()
        }
        w.close()
    }
}

tasks.register('updateChangeLog', Exec) {
    workingDir(project.projectDir)
    commandLine 'git', 'log', '--date=short', '--pretty=\\"%cd - %s\\"', '--since=1.month', '--no-merges'
    standardOutput = new PrintStream("${rootDir}/CHANGELOG.txt")
}

tasks.register('deobfJar', Jar) { // Generate deobfuscated
    from sourceSets.main.output
    archiveClassifier = 'deobf'
}

tasks.register('sourceJar', Jar) { // Generate sources
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives jar
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "${project.mod_domain}"
            artifactId = "${project.name}"
            version = "${project.minecraft_version}-${project.mod_version}"

            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}